# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import socket
import json
import os
import requests
from PyQt6.QtWidgets import QApplication, QMainWindow, QMessageBox
import sys
import time
import redis
from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(365, 231)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/logo-iart.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("QWidget{\n"
"background-color: rgb(0, 0, 0);\n"
"color: rgb(204, 83, 51)\n"
"}\n"
"QMessageBox{\n"
"color: rgb(204, 83, 51)\n"
"}\n"
"QPushButton{\n"
"border-radius:10px;\n"
"border: 2px solid #23074d;\n"
"background-color: #cc5333;\n"
"color:#FFB6C1;\n"
"height: 50px;\n"
"width: 120px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    border: 2px solid #009fff ;\n"
"    background-color:#23074d;\n"
"            }\n"
"QPushButton:pressed {\n"
"                background-color: #5650de; /* M√†u n·ªÅn khi nh·∫•n */\n"
"            }\n"
"\n"
"QLineEdit{\n"
"background-color: rgb(220, 220, 220);\n"
"border-radius: 10px;\n"
"    color: rgb(34, 0, 52);\n"
"height: 50px;\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setText("")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout_2.addWidget(self.lineEdit_2, 1, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("")
        self.lineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_2.addItem(spacerItem1, 3, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem2, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem3, 0, 2, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Iart VPSControl Pro"))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "Redis Cache"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Socket Adress"))
        self.pushButton.setText(_translate("MainWindow", "Connect"))


# h√†m update pip v√† c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
def install():
    # update pip tr∆∞·ªõc
    os.system('python.exe -m pip install --upgrade pip')
    # c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
    os.system('pip install -r requirements.txt')

def get_code_from_redis(redis_key, r):
    code = r.get(redis_key)
    # code l√† bytes, decode n√≥ th√†nh str utf-8
    return code.decode()

def get_ip_info():
    response = requests.get('https://ipinfo.io')
    data = response.json()
    return {
        'ip': data.get('ip'),
        'city': data.get('city'),
        'country': data.get('country'),
        'hostname': socket.gethostname(),
        'lat': data.get('loc').split(',')[0],
        'lon': data.get('loc').split(',')[1]
    }

def run_code(redis_key, r):
    code = get_code_from_redis(redis_key, r)
    # ghi code v√†o file
    with open('temp.py', 'w', encoding='utf-8') as f:
        f.write(code)
    # ch·∫°y code
    os.system('python temp.py')
    
class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.connect)
        self.load_config()
        
    def load_config(self):
        # ki·ªÉm tra file config.json c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists('config.json'):
            return
        with open('config.json', 'r', encoding='utf-8') as f:
            data = json.loads(f.read())
            self.ui.lineEdit.setText(f"{data['ip_socket']}:{data['port_socket']}")
            self.ui.lineEdit_2.setText(f"{data['ip_redis']}:{data['port_redis']}")
              
    def connect(self):
        if self.ui.lineEdit.text() == '' or self.ui.lineEdit_2.text() == '':
            QMessageBox.critical(self, 'Error', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin')
            return
        
        ip_socket = self.ui.lineEdit.text().split(':')[0]
        port_socket = int(self.ui.lineEdit.text().split(':')[1])
        ip_redis = self.ui.lineEdit_2.text().split(':')[0]
        port_redis = int(self.ui.lineEdit_2.text().split(':')[1])
        self.r = redis.Redis(host=ip_redis, port=port_redis, db=0)
        
        # l∆∞u th√¥ng tin v√†o file config
        with open('config.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps({
                'ip_socket': ip_socket,
                'port_socket': port_socket,
                'ip_redis': ip_redis,
                'port_redis': port_redis
            }))
        
        
        server_address = (ip_socket, port_socket)
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect(server_address)
        ip_info = get_ip_info()
        command = {
            'cmd': 'add',
            'result': {
                'name': os.name,
                'ip': ip_info['ip'],
                'city': ip_info['city'],
                'country': ip_info['country'],
                'hostname': ip_info['hostname'],
                'lat': ip_info['lat'],
                'lon': ip_info['lon']
            }
        }
        json_command = json.dumps(command)
        client_socket.sendall(json_command.encode())

        cmd_hello = f"""
üöÄüöÄüöÄ M√°y ch·ªß {command['result']['hostname']} ƒë√£ tham gia h·ªá th·ªëng th√†nh c√¥ng üöÄüöÄüöÄ


‚†Ä‚°Ä‚†§‚°Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ü‚¢†‚£Ä‚†Ä‚†Ä‚¢Ä‚£Ö‚†§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚††‚¢Ñ‚††‚†Ä
‚†Ä‚°Ñ‚†ê‚°Ñ‚†Ç‚†Ä‚†Ä‚¢†‚¢°‚°å‚¢£‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚°ó‚°Ñ‚¢°‚†Ä‚°Ñ‚†Ä‚¢°‚†Ä‚¢£‚†à‚†Ä
‚†à‚£Ñ‚¢ô‚°å‚¢É‚†â‚°à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°à‚¢Ä‚¢°‚°ò‚£á‚†ô‚°à
‚†à‚†Ü‚£â‚†Ñ‚°Å‚†Ä‚£à‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£à‚†Ä‚†±‚¢à‚°ß‚¢à‚†Ä
‚†Ä‚°Å‚†§‚°Ä‚†Ñ‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†â‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ä‚†Ä‚¢Ü‚††‚†Ä
‚†∞‚°Ä‚†∞‚°Ä‚†Ü‚†Ä‚£ø‚£ø‚£ø‚£ø‚°ø‚†π‚£ø‚£ø‚°ø‚†Å‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢Ü‚†Ä‚¢á‚†∞‚†Ä
‚†Ñ‚†Ñ‚£ô‚†Ñ‚†£‚£æ‚£ø‚£ø‚£ø‚£ø‚£ß‚£Ñ‚†à‚†ã‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°°‚¢à‚°£‚†à‚†Ñ
‚¢à‚†¶‚£©‚†Ñ‚°°‚†à‚¢ç‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†°‚°±‚¢å‚°ß‚¢à‚†Ñ
‚†Ä‚°Å‚†§‚°Ä‚†Ñ‚†Ä‚†Ä‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†Ä‚†Ä‚¢à‚†Ä‚¢á‚††‚†Ä
‚†Ä‚°Ä‚†§‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚¢É‚†ò‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†Ä‚†É‚†Ä‚†Ä‚†Ä‚¢Ä‚††‚¢Ñ‚††
‚¢Ä‚†Ñ‚£ê‚¢Ñ‚°Ç‚°Ä‚¢Ä‚†Ä‚°†‚¢ê‚°¢‚£ô‚¢ã‚†Ä‚°Ä‚¢ô‚†è‚£ê‚¢Ñ‚°Ä‚°Ä‚¢Ä‚†Ä‚°¢‚¢ê‚†¢‚£ê‚¢Ä


"""     # c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
        install()
        
        self.close()
        print(cmd_hello)
        
        while True:
            try:
                data = client_socket.recv(1024*1024).decode()
                json_data = json.loads(data)
                print(json_data)
                if json_data['cmd'] == 'ls_clients':
                    print('List clients:', json_data['result'])
                if json_data['cmd'] == 'python':
                    redis_key = json_data['redis_key']
                    print('Run code:', json_data['redis_key'])
                    run_code(redis_key, self.r)
                if json_data['cmd'] == 'ping':
                    client_socket.sendall(json.dumps({
                        'cmd': 'pong'
                    }).encode())
                if json_data['cmd'] == 'exit':
                    break
            except Exception as e:
                print(e)
                time.sleep(1)
            
    
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LoginWindow()
    window.show()
    sys.exit(app.exec())
